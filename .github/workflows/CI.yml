name: TSMP2 Build

# Controls when the action will run.
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  eclm_build_job:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04 ]
        config:
        - {
            name: "eCLM-ParFlow",
          }

    env:
      CC: mpicc
      CXX: mpicxx
      FC: mpifort
      F77: mpif77
      BUILD_DIR: bld
      INSTALL_DIR: install
      MODEL_DIR: ${{ github.workspace }}/component-models
      OASIS_TAG: tsmp-patches-v0.1
      eCLM_TAG: beta-0.1
      PARFLOW_TAG: oasis3-ubuntu22.04 #v3.13.0
      HYPRE_TAG: 2.26.0
      VER_NETCDF_C: 4.9.2
      VER_NETCDF_F90: 4.6.1
      CMAKE_PREFIX_PATH: ${{ github.workspace }}/dependencies
      SYSTEMNAME: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install TSMP2 dependencies on Ubuntu
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libxml++2.6-dev pylint wget cmake libpnetcdf-dev tcl-dev tk-dev
          version: 1.0
          execute_install_scripts: true

      - name: Download HDF5 headers and MPI Fortran compiler
        run: sudo apt-get install gfortran openmpi-bin libopenmpi-dev libhdf5-openmpi-dev libhdf5-openmpi-103 hdf5-helpers 

      - name: Create directories for component model and dependencies
        run: |
          mkdir -p ${CMAKE_PREFIX_PATH} ${MODEL_DIR}

      #
      # NetCDF C
      #
      - name: Restore cached NetCDF C ${{ env.VER_NETCDF_C }}
        uses: actions/cache/restore@v4
        id: cache-netcdf-restore
        with:
          path: ${{ env.CMAKE_PREFIX_PATH }}
          key: cache-${{ matrix.config.name }}-${{ env.VER_NETCDF_C }}

      - if: steps.cache-netcdf-restore.outputs.cache-hit != 'true'
        name: Install NetCDF C ${{ env.VER_NETCDF_C }}
        run: |
          wget https://github.com/Unidata/netcdf-c/archive/v${VER_NETCDF_C}.tar.gz
          tar xf v${VER_NETCDF_C}.tar.gz
          cd netcdf-c-${VER_NETCDF_C}
          export CPPFLAGS=-I/usr/include/hdf5/openmpi
          export LDFLAGS=-L/usr/lib/x86_64-linux-gnu/hdf5/openmpi
          ./configure --prefix=$(realpath $CMAKE_PREFIX_PATH)
          make -j4 install

      - if: steps.cache-netcdf-restore.outputs.cache-hit != 'true'
        name: Cache NetCDF ${{ env.VER_NETCDF_C }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CMAKE_PREFIX_PATH }}
          key: cache-${{ matrix.config.name }}-${{ env.VER_NETCDF_C }}

      #
      # NetCDF Fortran
      #
      - name: Restore cached NetCDF Fortran ${{ env.VER_NETCDF_F90 }}
        uses: actions/cache/restore@v4
        id: cache-netcdff90-restore
        with:
          path: ${{ env.CMAKE_PREFIX_PATH }}
          key: cache-${{ matrix.config.name }}-${{ env.VER_NETCDF_F90 }}

      - if: steps.cache-netcdff90-restore.outputs.cache-hit != 'true'
        name: Install NetCDF Fortran ${{ env.VER_NETCDF_F90 }}
        run: |
          wget https://github.com/Unidata/netcdf-fortran/archive/v${VER_NETCDF_F90}.tar.gz
          tar xf v${VER_NETCDF_F90}.tar.gz
          cd netcdf-fortran-${VER_NETCDF_F90}
          export CPPFLAGS=-I${CMAKE_PREFIX_PATH}
          export LDFLAGS=-L${CMAKE_PREFIX_PATH}
          ./configure --prefix=$(realpath $CMAKE_PREFIX_PATH)
          make -j4 install

      - if: steps.cache-netcdff90-restore.outputs.cache-hit != 'true'
        name: Cache NetCDF Fortran ${{ env.VER_NETCDF_F90 }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CMAKE_PREFIX_PATH }}
          key: cache-${{ matrix.config.name }}-${{ env.VER_NETCDF_F90 }}

      #
      # OASIS3-MCT
      #
      - name: Restore cached OASIS3-MCT ${{ env.OASIS_TAG }}
        uses: actions/cache/restore@v4
        id: cache-oasis-restore
        with:
          path: ${{ env.MODEL_DIR }}/oasis3-mct
          key: cache-${{ matrix.config.name }}-${{ env.OASIS_TAG }}

      - if: steps.cache-oasis-restore.outputs.cache-hit != 'true'
        name: Download OASIS3-MCT ${{ env.OASIS_TAG }}
        working-directory: ${{ env.MODEL_DIR }}
        run: |
          git clone -b $OASIS_TAG https://icg4geo.icg.kfa-juelich.de/ExternalReposPublic/oasis3-mct.git
          echo "OASIS3-MCT version: $(cd oasis3-mct && git describe --tags --always)"

      - if: steps.cache-oasis-restore.outputs.cache-hit != 'true'
        name: Cache OASIS3-MCT ${{ env.OASIS_TAG }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.MODEL_DIR }}/oasis3-mct
          key: cache-${{ matrix.config.name }}-${{ env.OASIS_TAG }}

      #
      # eCLM
      #
      - name: Restore cached eCLM ${{ env.eCLM_TAG }}
        uses: actions/cache/restore@v4
        id: cache-eclm-restore
        with:
          path: ${{ env.MODEL_DIR }}/eCLM
          key: cache-${{ matrix.config.name }}-${{ env.eCLM_TAG }}

      - if: steps.cache-eclm-restore.outputs.cache-hit != 'true'
        name: Download eCLM ${{ env.eCLM_TAG }}
        working-directory: ${{ env.MODEL_DIR }}
        run: |
          git clone -b $eCLM_TAG https://github.com/HPSCTerrSys/eCLM.git
          echo "eCLM version: $(cd eCLM && git describe --tags --always)"

      - if: steps.cache-eclm-restore.outputs.cache-hit != 'true'
        name: Cache eCLM ${{ env.eCLM_TAG }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.MODEL_DIR }}/eCLM
          key: cache-${{ matrix.config.name }}-${{ env.eCLM_TAG }}

      #
      # ParFlow
      #
      - name: Restore cached ParFlow ${{ env.PARFLOW_TAG }}
        uses: actions/cache/restore@v4
        id: cache-parflow-restore
        with:
          path: ${{ env.MODEL_DIR }}/parflow
          key: cache-${{ matrix.config.name }}-${{ env.PARFLOW_TAG }}

      # TODO: Must use upstream repo https://github.com/parflow/parflow.git
      - if: steps.cache-parflow-restore.outputs.cache-hit != 'true'
        name: Download ParFlow ${{ env.PARFLOW_TAG }}
        working-directory: ${{ env.MODEL_DIR }}
        run: |
          git clone -b $PARFLOW_TAG https://github.com/kvrigor/parflow.git
          echo "ParFlow version: $(cd parflow && git describe --tags --always)"

      - if: steps.cache-parflow-restore.outputs.cache-hit != 'true'
        name: Cache ParFlow ${{ env.PARFLOW_TAG }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.MODEL_DIR }}/parflow
          key: cache-${{ matrix.config.name }}-${{ env.PARFLOW_TAG }}

      #
      # Hypre
      #
      - name: Restore cached Hypre ${{ env.HYPRE_TAG }}
        uses: actions/cache/restore@v4
        id: cache-hypre-restore
        with:
          path: ${{ env.CMAKE_PREFIX_PATH }}
          key: cache-${{ matrix.config.name }}-${{ env.HYPRE_TAG }}

      - if: steps.cache-hypre-restore.outputs.cache-hit != 'true'
        name: Install Hypre ${{ env.HYPRE_TAG }}
        run: |
          wget https://github.com/hypre-space/hypre/archive/v${HYPRE_TAG}.tar.gz
          tar xf v${HYPRE_TAG}.tar.gz
          cd hypre-${HYPRE_TAG}/src
          ./configure --prefix=$(realpath $CMAKE_PREFIX_PATH)
          make -j4 install

      - if: steps.cache-hypre-restore.outputs.cache-hit != 'true'
        name: Cache Hypre ${{ env.HYPRE_TAG }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CMAKE_PREFIX_PATH }}
          key: cache-${{ matrix.config.name }}-${{ env.HYPRE_TAG }}

      - name: Check CMAKE_PREFIX_PATH
        run: tree -FUCh --du --filelimit 20 -L 2 ${CMAKE_PREFIX_PATH}

      #
      # TSMP2
      #
      - name: Configure TSMP2
        run: >-
          cmake -S . -B ${BUILD_DIR} --log-level=DEBUG
          -DCMAKE_BUILD_TYPE="RELEASE"
          -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR}
          -DOASIS_SRC=${MODEL_DIR}/oasis3-mct
          -DeCLM="ON"
          -DeCLM_SRC=${MODEL_DIR}/eCLM
          -DParFlow="ON"
          -DPARFLOW_SRC=${MODEL_DIR}/parflow

      # - name: Set debugging session
      #   uses: lhotari/action-upterm@v1
      #   with:
      #     limit-access-to-actor: true
      #     limit-access-to-users: kvrigor
      #     wait-timeout-minutes: 5

      - name: Build TSMP2
        run: |
          cmake --build ${BUILD_DIR}

      - name: Install TSMP2
        run: |
          cmake --install ${BUILD_DIR}
