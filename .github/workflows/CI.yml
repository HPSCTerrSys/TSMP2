name: TSMP2 Build

# Controls when the action will run.
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  eclm_build_job:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-24.04 ]
        config:
        - {
            name: "CLM3.5-PDAF",
            use_oasis: "False"
          }
        - {
            name: "eCLM-PDAF",
            use_oasis: "False"
          }
        - {
            name: "ICON-eCLM-ParFlow",
            use_oasis: "True",
            parflow_dir: "parflow"
          }
        - {
            name: "CLM3.5-ParFlow-PDAF",
            use_oasis: "True",
            parflow_dir: "parflow_pdaf"
          }
        - {
            name: "eCLM-ParFlow-PDAF",
            use_oasis: "True",
            parflow_dir: "parflow_pdaf"
          }
    env:
      SYSTEMNAME: UBUNTU
      STAGE: 24.04
      CC: mpicc
      CXX: mpic++
      FC: mpifort
      F77: mpif77
      MPI_HOME: /usr/lib/x86_64-linux-gnu/openmpi
      VER_HYPRE: 2.26.0
      VER_NETCDF_C: 4.9.2
      VER_NETCDF_F90: 4.6.1
      VER_ECCODES: 2.40.0
      MODEL_DIR: ${{ github.workspace }}/models
      CMAKE_PREFIX_PATH: ${{ github.workspace }}/dependencies

    steps:
      - uses: actions/checkout@v4

      # These apt packages have post-install step which can't be triggered by GitHub cache.
      - name: Install TSMP2 dependencies on Ubuntu
        run: |
          sudo apt-get update
          sudo apt-get install gfortran openmpi-bin libopenmpi-dev libhdf5-openmpi-dev libhdf5-openmpi-hl-fortran-100t64 hdf5-helpers liblapack-dev libblas-dev

      # These apt packages can be safely cached.
      - name: Install extra TSMP2 dependencies on Ubuntu
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libxml++2.6-dev pylint wget cmake libpnetcdf-dev tcl-dev tk-dev liblzma-dev
          version: 1.0
          execute_install_scripts: true

      - name: Create directory for dependencies
        run: |
          mkdir -pv ${CMAKE_PREFIX_PATH}

      #
      # NetCDF C
      #
      - name: Restore cached NetCDF C ${{ env.VER_NETCDF_C }}
        uses: actions/cache/restore@v4
        id: cache-netcdf-restore
        with:
          path: ${{ env.CMAKE_PREFIX_PATH }}
          key: cache-${{ env.VER_NETCDF_C }}

      - if: steps.cache-netcdf-restore.outputs.cache-hit != 'true'
        name: Install NetCDF C ${{ env.VER_NETCDF_C }}
        run: |
          wget https://github.com/Unidata/netcdf-c/archive/v${VER_NETCDF_C}.tar.gz
          tar xf v${VER_NETCDF_C}.tar.gz
          cd netcdf-c-${VER_NETCDF_C}
          export CPPFLAGS=-I/usr/include/hdf5/openmpi
          export LDFLAGS=-L/usr/lib/x86_64-linux-gnu/hdf5/openmpi
          ./configure --prefix=$(realpath $CMAKE_PREFIX_PATH)
          make -j4 install

      - if: steps.cache-netcdf-restore.outputs.cache-hit != 'true'
        name: Cache NetCDF ${{ env.VER_NETCDF_C }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CMAKE_PREFIX_PATH }}
          key: cache-${{ env.VER_NETCDF_C }}

      #
      # NetCDF Fortran
      #
      - name: Restore cached NetCDF Fortran ${{ env.VER_NETCDF_F90 }}
        uses: actions/cache/restore@v4
        id: cache-netcdff90-restore
        with:
          path: ${{ env.CMAKE_PREFIX_PATH }}
          key: cache-${{ env.VER_NETCDF_F90 }}

      - if: steps.cache-netcdff90-restore.outputs.cache-hit != 'true'
        name: Install NetCDF Fortran ${{ env.VER_NETCDF_F90 }}
        run: |
          wget https://github.com/Unidata/netcdf-fortran/archive/v${VER_NETCDF_F90}.tar.gz
          tar xf v${VER_NETCDF_F90}.tar.gz
          cd netcdf-fortran-${VER_NETCDF_F90}
          export CPPFLAGS=-I${CMAKE_PREFIX_PATH}/include
          export LDFLAGS=-L${CMAKE_PREFIX_PATH}/lib
          ./configure --prefix=$(realpath $CMAKE_PREFIX_PATH)
          make -j4 install

      - if: steps.cache-netcdff90-restore.outputs.cache-hit != 'true'
        name: Cache NetCDF Fortran ${{ env.VER_NETCDF_F90 }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CMAKE_PREFIX_PATH }}
          key: cache-${{ env.VER_NETCDF_F90 }}

      #
      # Hypre
      #
      - if: contains(matrix.config.name, 'ParFlow')
        name: Restore cached Hypre ${{ env.VER_HYPRE }}
        uses: actions/cache/restore@v4
        id: cache-hypre-restore
        with:
          path: ${{ env.CMAKE_PREFIX_PATH }}
          key: cache-${{ env.VER_HYPRE }}

      - if: contains(matrix.config.name, 'ParFlow') && steps.cache-hypre-restore.outputs.cache-hit != 'true'
        name: Install Hypre ${{ env.VER_HYPRE }}
        run: |
          wget https://github.com/hypre-space/hypre/archive/v${VER_HYPRE}.tar.gz
          tar xf v${VER_HYPRE}.tar.gz
          cd hypre-${VER_HYPRE}/src
          ./configure --prefix=$(realpath $CMAKE_PREFIX_PATH)
          make -j4 install

      - if: contains(matrix.config.name, 'ParFlow') && steps.cache-hypre-restore.outputs.cache-hit != 'true'
        name: Cache Hypre ${{ env.VER_HYPRE }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CMAKE_PREFIX_PATH }}
          key: cache-${{ env.VER_HYPRE }}

      #
      # ecCodes
      #
      - if: contains(matrix.config.name, 'ICON')
        name: Restore cached ecCodes ${{ env.VER_ECCODES }}
        uses: actions/cache/restore@v4
        id: cache-eccodes-restore
        with:
          path: ${{ env.CMAKE_PREFIX_PATH }}
          key: cache-${{ env.VER_ECCODES }}

      - if: contains(matrix.config.name, 'ICON') && steps.cache-eccodes-restore.outputs.cache-hit != 'true'
        name: Install ecCodes ${{ env.VER_ECCODES }}
        run: |
          wget https://github.com/ecmwf/eccodes/archive/refs/tags/${VER_ECCODES}.tar.gz
          tar xf ${VER_ECCODES}.tar.gz
          cd eccodes-${VER_ECCODES}
          cmake -S . -B bld -DCMAKE_INSTALL_PREFIX=${CMAKE_PREFIX_PATH}
          cmake --build bld --parallel 4
          cmake --install bld

      - if: contains(matrix.config.name, 'ICON') && steps.cache-eccodes-restore.outputs.cache-hit != 'true'
        name: Cache ecCodes ${{ env.VER_ECCODES }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CMAKE_PREFIX_PATH }}
          key: cache-${{ env.VER_ECCODES }}

      #
      # Check component model versions
      #
      - name: Extract required component model versions
        working-directory: ${{ env.MODEL_DIR }}
        run: |
          git submodule status | cut -c2- > model_versions

          if [[ "${{ matrix.config.use_oasis }}" == "True" ]]; then
            VER_OASIS=$(cat model_versions | grep " oasis3-mct " | cut -d' ' -f1)
            echo "VER_OASIS=${VER_OASIS}"
            echo "VER_OASIS=${VER_OASIS}" >> $GITHUB_ENV
          fi

          if [[ "${{ matrix.config.name }}" == *"eCLM"* ]]; then
            VER_eCLM=$(cat model_versions | grep " eCLM " | cut -d' ' -f1)
            echo "VER_eCLM=${VER_eCLM}"
            echo "VER_eCLM=${VER_eCLM}" >> $GITHUB_ENV
          fi

          if [[ "${{ matrix.config.name }}" == *"CLM3.5"* ]]; then
            VER_CLM35=$(cat model_versions | grep " CLM3.5 " | cut -d' ' -f1)
            echo "VER_CLM35=${VER_CLM35}"
            echo "VER_CLM35=${VER_CLM35}" >> $GITHUB_ENV
          fi

          if [[ "${{ matrix.config.name }}" == *"ParFlow"* ]]; then
            VER_ParFlow=$(cat model_versions | grep " ${{ matrix.config.parflow_dir }} "  | cut -d' ' -f1)
            echo "VER_ParFlow=${VER_ParFlow}"
            echo "VER_ParFlow=${VER_ParFlow}" >> $GITHUB_ENV
          fi

          if [[ "${{ matrix.config.name }}" == *"ICON"* ]]; then
            VER_ICON=$(cat model_versions | grep " icon " | cut -d' ' -f1)
            echo "VER_ICON=${VER_ICON}"
            echo "VER_ICON=${VER_ICON}" >> $GITHUB_ENV
          fi

          if [[ "${{ matrix.config.name }}" == *"PDAF"* ]]; then
            VER_PDAF=$(cat model_versions | grep " pdaf " | cut -d' ' -f1)
            echo "VER_PDAF=${VER_PDAF}"
            echo "VER_PDAF=${VER_PDAF}" >> $GITHUB_ENV
          fi

      #
      # OASIS3-MCT
      #
      - if: matrix.config.use_oasis == 'True'
        name: Restore cached OASIS3-MCT submodule ${{ env.VER_OASIS }}
        uses: actions/cache/restore@v4
        id: cache-oasis-restore
        with:
          path: ${{ env.MODEL_DIR }}/oasis3-mct
          key: cache-${{ env.VER_OASIS }}

      - if: matrix.config.use_oasis == 'True' && steps.cache-oasis-restore.outputs.cache-hit != 'true'
        name: Update OASIS3-MCT submodule ${{ env.VER_OASIS }}
        working-directory: ${{ env.MODEL_DIR }}/oasis3-mct
        run: |
          git submodule update --init --force .

      - if: matrix.config.use_oasis == 'True' && steps.cache-oasis-restore.outputs.cache-hit != 'true'
        name: Cache OASIS3-MCT submodule ${{ env.VER_OASIS }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.MODEL_DIR }}/oasis3-mct
          key: cache-${{ env.VER_OASIS }}

      #
      # eCLM
      #
      - if: contains(matrix.config.name, 'eCLM')
        name: Restore cached eCLM
        uses: actions/cache/restore@v4
        id: cache-eclm-restore
        with:
          path: ${{ env.MODEL_DIR }}/eCLM
          key: cache-${{ env.VER_eCLM }}

      - if: contains(matrix.config.name, 'eCLM') && steps.cache-eclm-restore.outputs.cache-hit != 'true'
        name: Update eCLM submodule ${{ env.VER_eCLM }}
        working-directory: ${{ env.MODEL_DIR }}/eCLM
        run: |
          git submodule update --init --force .
          echo "TSMP2_MODEL_OPTS=${TSMP2_MODEL_OPTS} --eCLM" >> $GITHUB_ENV

      - if: contains(matrix.config.name, 'eCLM') && steps.cache-eclm-restore.outputs.cache-hit != 'true'
        name: Cache eCLM submodule ${{ env.VER_eCLM }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.MODEL_DIR }}/eCLM
          key: cache-${{ env.VER_eCLM }}

      #
      # CLM3.5
      #
      - if: contains(matrix.config.name, 'CLM3.5')
        name: Restore cached CLM3.5 submodule ${{ env.VER_CLM35 }}
        uses: actions/cache/restore@v4
        id: cache-clm35-restore
        with:
          path: ${{ env.MODEL_DIR }}/CLM3.5
          key: cache-${{ env.VER_CLM35 }}

      - if: contains(matrix.config.name, 'CLM3.5') && steps.cache-clm35-restore.outputs.cache-hit != 'true'
        name: Update CLM3.5 submodule ${{ env.VER_CLM35 }}
        working-directory: ${{ env.MODEL_DIR }}/CLM3.5
        run: |
          git submodule update --init --force .
          echo "TSMP2_MODEL_OPTS=${TSMP2_MODEL_OPTS} --CLM35" >> $GITHUB_ENV

      - if: contains(matrix.config.name, 'CLM3.5') && steps.cache-clm35-restore.outputs.cache-hit != 'true'
        name: Cache CLM3.5 submodule ${{ env.VER_CLM35 }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.MODEL_DIR }}/CLM3.5
          key: cache-${{ env.VER_CLM35 }}

      #
      # ParFlow
      #
      - if: contains(matrix.config.name, 'ParFlow')
        name: Restore cached ParFlow submodule ${{ env.VER_ParFlow }}
        uses: actions/cache/restore@v4
        id: cache-parflow-restore
        with:
          path: ${{ env.MODEL_DIR }}/${{ matrix.config.parflow_dir }}
          key: cache-${{ env.VER_ParFlow }}

      - if: contains(matrix.config.name, 'ParFlow') && steps.cache-parflow-restore.outputs.cache-hit != 'true'
        name: Update ParFlow submodule ${{ env.VER_ParFlow }}
        working-directory: ${{ env.MODEL_DIR }}/${{ matrix.config.parflow_dir }}
        run: |
          git submodule update --init --force .
          echo "TSMP2_MODEL_OPTS=${TSMP2_MODEL_OPTS} --ParFlow" >> $GITHUB_ENV

      - if: contains(matrix.config.name, 'ParFlow') && steps.cache-parflow-restore.outputs.cache-hit != 'true'
        name: Cache ParFlow submodule ${{ env.VER_ParFlow }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.MODEL_DIR }}/${{ matrix.config.parflow_dir }}
          key: cache-${{ env.VER_ParFlow }}

      #
      # ICON
      #
      - if: contains(matrix.config.name, 'ICON')
        name: Restore cached ICON submodule ${{ env.VER_ICON }}
        uses: actions/cache/restore@v4
        id: cache-icon-restore
        with:
          path: ${{ env.MODEL_DIR }}/icon
          key: cache-${{ env.VER_ICON }}

      - if: contains(matrix.config.name, 'ICON') && steps.cache-icon-restore.outputs.cache-hit != 'true'
        name: Update ICON submodule ${{ env.VER_ICON }}
        working-directory: ${{ env.MODEL_DIR }}/icon
        run: |
          git submodule update --init --force .
          echo "TSMP2_MODEL_OPTS=${TSMP2_MODEL_OPTS} --ICON" >> $GITHUB_ENV

      - if: contains(matrix.config.name, 'ICON') && steps.cache-icon-restore.outputs.cache-hit != 'true'
        name: Cache ICON submodule ${{ env.VER_ICON }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.MODEL_DIR }}/icon
          key: cache-${{ env.VER_ICON }}

      #
      # PDAF
      #
      - if: contains(matrix.config.name, 'PDAF')
        name: Restore cached PDAF submodule ${{ env.VER_PDAF }}
        uses: actions/cache/restore@v4
        id: cache-pdaf-restore
        with:
          path: ${{ env.MODEL_DIR }}/pdaf
          key: cache-${{ env.VER_PDAF }}

      - if: contains(matrix.config.name, 'PDAF') && steps.cache-pdaf-restore.outputs.cache-hit != 'true'
        name: Update PDAF submodule ${{ env.VER_PDAF }}
        working-directory: ${{ env.MODEL_DIR }}/pdaf
        run: |
          git submodule update --init --force .
          echo "TSMP2_MODEL_OPTS=${TSMP2_MODEL_OPTS} --PDAF" >> $GITHUB_ENV

      - if: contains(matrix.config.name, 'PDAF') && steps.cache-pdaf-restore.outputs.cache-hit != 'true'
        name: Cache PDAF submodule ${{ env.VER_PDAF }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.MODEL_DIR }}/pdaf
          key: cache-${{ env.VER_PDAF }}

      #
      # TSMP2
      #
      - name: Verify component model versions
        working-directory: ${{ env.MODEL_DIR }}
        run: |
          git submodule foreach 'git rev-parse HEAD'
          echo ""
          git submodule status | grep -vE "^-"

      - name: Build ${{ matrix.config.name }}
        run: |
          echo "TSMP2_MODEL_OPTS=${TSMP2_MODEL_OPTS}"
          ./build_tsmp2.sh ${TSMP2_MODEL_OPTS} --no_update --compiler gnu
          tree -L 4 bin
